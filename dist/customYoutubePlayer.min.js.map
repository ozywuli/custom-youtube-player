{"version":3,"sources":["customYoutubePlayer.min.js"],"names":["f","exports","module","define","amd","window","global","self","this","CustomYoutubePlayer","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","CustomYouTubePlayer","userOptions","document","getElementById","tag","createElement","id","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","$","$adaptiveEl","$youtubeIframe","Player","undefined","customMethods","onPlayerReady","combinedExtendOptions","adaptiveVid","turnOnAdaptiveVid","onPlayerStateChange","getPlayerState","onVidEnd","turnOffAdaptiveVid","off","resizeIframe","newWidth","width","adaptiveVidDimensions","newHeight","height","attr","each","$thisEl","adaptiveVidParent","removeAttr","css","on","defaultNativeOptions","events","onReady","onStateChange","combinedNativeOptions","extend","native","onYouTubeIframeAPIReady","YT","defaultExtendOptions"],"mappings":"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","file":"customYoutubePlayer.min.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.CustomYoutubePlayer = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n;(function () {\n\n    // IIFE\n    var CustomYouTubePlayer = function () {\n\n        /*------------------------------------*\\\n          CUSTOM YOUTUBE IFRAME API\n        \\*------------------------------------*/\n        function CustomYouTubePlayer(userOptions) {\n\n            // ADD YOUTUBE IFRAME API SCRIPT\n            if (!document.getElementById('youtube-iframe')) {\n                var tag = document.createElement('script');\n                tag.id = 'youtube-iframe';\n                tag.src = 'https://www.youtube.com/iframe_api';\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            }\n\n            var videoId;\n            var $youtubeIframeWrapper = $('.youtube-player-wrapper');\n            var $youtubeIframe = $('#youtube-player-iframe');\n            var $adaptiveEl;\n\n            // SELF\n            var self = this;\n\n            // YOUTUBE IFRAME API PLAYER\n            this.Player = undefined;\n\n            /*------------------------------------*\\\n              CUSTOM METHODS\n            \\*------------------------------------*/\n            self.customMethods = {\n                onPlayerReady: function onPlayerReady() {\n                    // TURN ON ADAPTIVE VIDEO IF USER HAS SELECTED IT\n                    if (combinedExtendOptions.adaptiveVid) {\n                        self.customMethods.turnOnAdaptiveVid();\n                    }\n                },\n\n                onPlayerStateChange: function onPlayerStateChange() {\n                    var playerState = self.Player.getPlayerState();\n\n                    // WHEN THE VIDEO HAS ENDED\n                    if (playerState === 0) {\n                        combinedExtendOptions.onVidEnd();\n                    }\n                },\n\n                // OPTION TO TURN OFF ADAPTIVE VIDEO DYNAMICALLY\n                turnOffAdaptiveVid: function turnOffAdaptiveVid() {\n                    $adaptiveEl.off('resize.ytModal');\n                },\n\n                // ADPATIVE VIDEO STUFF\n                turnOnAdaptiveVid: function turnOnAdaptiveVid() {\n                    $youtubeIframe = $('#youtube-player-iframe');\n                    $adaptiveEl = $(combinedExtendOptions.adaptiveVidParent);\n\n                    // LOOP THROUGH IFRAME IFRAME AND SET THE ASPECT RATIO BASED ON THE IFRAME'S DEFAULT WIDTH AND HEIGHT\n                    $youtubeIframe.each(function () {\n                        $(this).attr('data-aspectratio', this.height / this.width).attr('data-aspectratio-h', this.width / this.height).removeAttr('height width');\n                    });\n\n                    // RESIZE IFRAME FUNCTION\n                    function resizeIframe() {\n\n                        // NEW WIDTH BASED ON IFRAME'S ORIGINAL WIDTH AND THE DESIRED DIMENSIONS\n                        var newWidth = $adaptiveEl.width() * combinedExtendOptions.adaptiveVidDimensions;\n                        // NEW HEIGHT BASED ON IFRAME'S ORIGINAL HEIGHT AND THE DESIRED DIMENSIONS\n                        var newHeight = $adaptiveEl.height() * combinedExtendOptions.adaptiveVidDimensions;\n\n                        // RESIZE BASE ON WIDTH\n                        if ($adaptiveEl.height() / $adaptiveEl.width() > $youtubeIframe.attr('data-aspectratio')) {\n                            $youtubeIframe.each(function () {\n                                var $thisEl = $(this);\n                                $thisEl.width(newWidth).height(newWidth * $thisEl.attr('data-aspectratio'));\n                            });\n\n                            // RESIZE BASE ON HEIGHT\n                        } else {\n                            $youtubeIframe.each(function () {\n                                var $thisEl = $(this);\n                                $thisEl.width(newHeight * $thisEl.attr('data-aspectratio-h')).height(newHeight);\n                            });\n                        }\n                    }\n\n                    // CALL `resizeIframe` TO GET THE BALL ROLLING\n                    resizeIframe();\n\n                    // ONCE IFRAME HAS BEEN RESIZED, REVEAL THE IFRAME\n                    $youtubeIframe.css('opacity', 1);\n\n                    // RESIZE IFRAME SHOULD WORK WHEN THE WINDOW RESIZES\n                    $adaptiveEl.on('resize.ytModal', function () {\n                        resizeIframe();\n                    });\n                }\n\n                /*------------------------------------*\\\n                  NATIVE YOUTUBE IFRAME API\n                \\*------------------------------------*/\n            };var defaultNativeOptions = {\n                events: {\n                    'onReady': self.customMethods.onPlayerReady,\n                    'onStateChange': self.customMethods.onPlayerStateChange\n                }\n            };\n\n            var combinedNativeOptions = $.extend(defaultNativeOptions, userOptions.native);\n\n            window.onYouTubeIframeAPIReady = function () {\n                self.Player = new YT.Player('youtube-player-iframe', combinedNativeOptions);\n            };\n\n            /*------------------------------------*\\\n              EXTENDED YOUTUBE IFRAME API\n            \\*------------------------------------*/\n            var defaultExtendOptions = {\n                adaptiveVid: true,\n                adaptiveVidParent: window,\n                adaptiveVidDimensions: 0.9,\n                onVidEnd: null\n            };\n\n            var combinedExtendOptions = $.extend(defaultExtendOptions, userOptions.extend);\n\n            // HIDE THE YOUTUBE IFRAME IF ADAPTIVE VIDEO IS TURNED ON SO THAT USERS DON'T SEE THE IFRAME BEING RESIZED\n            if (combinedExtendOptions.adaptiveVid) {\n                $youtubeIframe.css('opacity', 0);\n            }\n        } // END `CustomYouTubePlayer()`\n\n        // RETURN\n        return CustomYouTubePlayer;\n    }(); // END `CustomYouTubePlayer` IIFE\n\n\n    /*------------------------------------*\\\n      EXPORT OPTIONS\n    \\*------------------------------------*/\n    // if (typeof define === 'function' && define.amd) {\n    //     define([], function() {\n    //         return CustomYouTubePlayer;\n    //     });\n    // } else if (typeof exports !== \"undefined\" && exports !== null) {\n    //     module.exports = CustomYouTubePlayer;\n    // } else {\n    //     window.CustomYouTubePlayer = CustomYouTubePlayer;\n    // }\n\n    window.CustomYouTubePlayer = CustomYouTubePlayer;\n}).call(undefined);\n\n},{}]},{},[1])(1)\n});"]}